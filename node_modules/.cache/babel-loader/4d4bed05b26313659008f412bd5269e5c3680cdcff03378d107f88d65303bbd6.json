{"ast":null,"code":"var _jsxFileName = \"/Users/hongdonghwa/Desktop/donghwa/simplediary/src/OptimizeTest.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OptimizeTest = () => {\n  _s();\n  const [count, setCount] = useState(1);\n  const [obj, setObj] = useState({\n    count: 1\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 50\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Counter A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCount(count),\n        children: \"A button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Counter B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setObj({\n          count: obj.count\n        }),\n        children: \"B button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 13\n  }, this);\n};\n\n// const Textview = React.memo(({text}) => {\n//     useEffect(()=>{\n//         console.log(`Updata :: Text : ${text}`)\n//     })\n//     return <div>{text}</div>\n// })\n\n// const CountView = React.memo(({count}) => {\n//     useEffect(()=>{\n//         console.log(`Updata :: Count : ${count}`)\n//     })\n//     return <div>{count}</div>\n// })\n\n// const OptimizeTest = () => {\n\n//     const [count, setCount] = useState(1)\n//     const [text, setText] = useState(\"\")\n\n//     return <div style={{padding: 50}}>\n//         <div>\n//             <h2>count</h2>\n//             <CountView count={count}/>\n//             <button onClick={()=>setCount(count+1)}>+</button>\n//         </div>\n//         <div>\n//             <h2>text</h2>\n//             <Textview text={text}/>\n//             <input value={text} onChange={(e)=>setText(e.target.value)} />\n//         </div>\n//     </div>\n// }\n_s(OptimizeTest, \"CzYp+NRHhE2fMdKpbL2KZcAXU0U=\");\n_c = OptimizeTest;\nexport default OptimizeTest;\nvar _c;\n$RefreshReg$(_c, \"OptimizeTest\");","map":{"version":3,"names":["React","useEffect","useState","OptimizeTest","count","setCount","obj","setObj","padding"],"sources":["/Users/hongdonghwa/Desktop/donghwa/simplediary/src/OptimizeTest.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\n\nconst OptimizeTest = () => {\n\n    const [count, setCount] = useState(1)\n    const [obj, setObj] = useState({\n        count: 1\n    })\n\n\n\n\n\n    return (<div style={{padding: 50}}>\n        <div>\n            <h2>Counter A</h2>\n            <button onClick={() => setCount(count)}>A button</button>\n        </div>\n        <div>\n            <h2>Counter B</h2>\n            <button onClick={() => setObj({\n                count: obj.count\n            })}>B button</button>\n        </div>\n    </div>\n    )\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const Textview = React.memo(({text}) => {\n//     useEffect(()=>{\n//         console.log(`Updata :: Text : ${text}`)\n//     })\n//     return <div>{text}</div>\n// })\n\n// const CountView = React.memo(({count}) => {\n//     useEffect(()=>{\n//         console.log(`Updata :: Count : ${count}`)\n//     })\n//     return <div>{count}</div>\n// })\n\n\n// const OptimizeTest = () => {\n\n    \n//     const [count, setCount] = useState(1)\n//     const [text, setText] = useState(\"\")\n    \n//     return <div style={{padding: 50}}>\n//         <div>\n//             <h2>count</h2>\n//             <CountView count={count}/>\n//             <button onClick={()=>setCount(count+1)}>+</button>\n//         </div>\n//         <div>\n//             <h2>text</h2>\n//             <Textview text={text}/>\n//             <input value={text} onChange={(e)=>setText(e.target.value)} />\n//         </div>\n//     </div>\n// }\n\nexport default OptimizeTest"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA;AAElD,MAAMC,YAAY,GAAG,MAAM;EAAA;EAEvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACI,GAAG,EAAEC,MAAM,CAAC,GAAGL,QAAQ,CAAC;IAC3BE,KAAK,EAAE;EACX,CAAC,CAAC;EAMF,oBAAQ;IAAK,KAAK,EAAE;MAACI,OAAO,EAAE;IAAE,CAAE;IAAA,wBAC9B;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB,eAClB;QAAQ,OAAO,EAAE,MAAMH,QAAQ,CAACD,KAAK,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB;IAAA;MAAA;MAAA;MAAA;IAAA,QACvD,eACN;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB,eAClB;QAAQ,OAAO,EAAE,MAAMG,MAAM,CAAC;UAC1BH,KAAK,EAAEE,GAAG,CAACF;QACf,CAAC,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB;IAAA;MAAA;MAAA;MAAA;IAAA,QACnB;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAGV,CAAC;;AAoBD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,GA9EMD,YAAY;AAAA,KAAZA,YAAY;AAgFlB,eAAeA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}