{"ast":null,"code":"var _jsxFileName = \"/Users/hongdonghwa/Desktop/donghwa/simplediary/src/App.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from 'react';\nimport './App.css';\nimport DiaryEditor from './DiaryEditor';\nimport DiaryList from './DiaryList';\nimport Lifecycle from './lifecycle';\n\n// const dummyList = [\n//   {\n//     id: 1,\n//     author: \"홍동화\",\n//     content: \"너무 추워요\",\n//     emotion : 5,\n//     created_date: new Date().getTime(),\n//   },  \n//   {\n//     id: 2,\n//     author: \"전예린\",\n//     content: \"그따구로 할거면 접어 xx\",\n//     emotion : 2,\n//     created_date: new Date().getTime(),\n//   },  \n//   {\n//     id: 3,\n//     author: \"김일태\",\n//     content: \"페어가 연락이 안와요.\",\n//     emotion : 1,\n//     created_date: new Date().getTime(),\n//   },  \n//   {\n//     id: 4,\n//     author: \"이희진\",\n//     content: \"축구는 시끄러울 때만 조금씩 봅니다.\",\n//     emotion : 3,\n//     created_date: new Date().getTime(),\n//   },  \n//   {\n//     id: 5,\n//     author: \"이유정\",\n//     content: \"줌 모각코 스터디 좋아여\",\n//     emotion : 5,\n//     created_date: new Date().getTime(),\n//   },\n// ]\n\n// https://jsonplaceholder.typicode.com/comments\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const dataId = useRef(0);\n  const getData = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/comments');\n  };\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current\n    };\n    dataId.current += 1;\n    setData([newItem, ...data]);\n  };\n  const onRemove = targetId => {\n    console.log(`${targetId}가 삭제되었습니다.`);\n    const newDiaryList = data.filter(it => it.id !== targetId);\n    setData(newDiaryList);\n  };\n\n  // 리액트 특성상 데이터는 위에서 아래로 , 이벤트는 아래에서 위로 올라감.\n  // 그래서 수정완료 이벤트를 다이어리아이템에서 앱컴포넌트까지 전달하기 위해서는 \n  // 데이터를 가지고 있는 앱컴포넌트에 수정할 수 있는 기능을 할수 있는 함수를 만들어서,\n  // 다이어리아이템까지 전달해주어야 한다.\n  const onEdit = (targetId, newContent) => {\n    setData(\n    // 원본 데이터 배열에서 , 모든 요소를 순회하며 새로운 배열을 만들어서 셋데이터로\n    // 수정 대상이라면 컨텐츠를 뉴ㅋㄴ텐츠로 교체, 아니라면 현재 원본 값을 지킴.\n    data.map(it => it.id === targetId ? {\n      ...it,\n      content: newContent\n    } : it));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Lifecycle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      onEdit: onEdit,\n      onRemove: onRemove,\n      diaryList: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PSh4R9M9XXzghkCT8iIKMDh9kfM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useRef","useState","DiaryEditor","DiaryList","Lifecycle","App","data","setData","dataId","getData","res","fetch","onCreate","author","content","emotion","created_date","Date","getTime","newItem","id","current","onRemove","targetId","console","log","newDiaryList","filter","it","onEdit","newContent","map"],"sources":["/Users/hongdonghwa/Desktop/donghwa/simplediary/src/App.js"],"sourcesContent":["import { useRef, useState } from 'react';\nimport './App.css';\nimport DiaryEditor from './DiaryEditor';\nimport DiaryList from './DiaryList';\nimport Lifecycle from './lifecycle'\n\n// const dummyList = [\n//   {\n//     id: 1,\n//     author: \"홍동화\",\n//     content: \"너무 추워요\",\n//     emotion : 5,\n//     created_date: new Date().getTime(),\n//   },  \n//   {\n//     id: 2,\n//     author: \"전예린\",\n//     content: \"그따구로 할거면 접어 xx\",\n//     emotion : 2,\n//     created_date: new Date().getTime(),\n//   },  \n//   {\n//     id: 3,\n//     author: \"김일태\",\n//     content: \"페어가 연락이 안와요.\",\n//     emotion : 1,\n//     created_date: new Date().getTime(),\n//   },  \n//   {\n//     id: 4,\n//     author: \"이희진\",\n//     content: \"축구는 시끄러울 때만 조금씩 봅니다.\",\n//     emotion : 3,\n//     created_date: new Date().getTime(),\n//   },  \n//   {\n//     id: 5,\n//     author: \"이유정\",\n//     content: \"줌 모각코 스터디 좋아여\",\n//     emotion : 5,\n//     created_date: new Date().getTime(),\n//   },\n// ]\n\n// https://jsonplaceholder.typicode.com/comments\n\n\nfunction App() {\n  const [data, setData] = useState([])\n\n  const dataId = useRef(0)\n\n  const getData = async() => { \n    const res = await fetch('https://jsonplaceholder.typicode.com/comments')\n  }\n\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime()\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current,\n    };\n    dataId.current += 1;\n    setData([newItem, ...data]);\n\n  }\n\n  const onRemove = (targetId) => {\n    console.log(`${targetId}가 삭제되었습니다.`)\n    const newDiaryList = data.filter((it) => it.id !== targetId)\n    setData(newDiaryList)\n  }\n\n  // 리액트 특성상 데이터는 위에서 아래로 , 이벤트는 아래에서 위로 올라감.\n  // 그래서 수정완료 이벤트를 다이어리아이템에서 앱컴포넌트까지 전달하기 위해서는 \n  // 데이터를 가지고 있는 앱컴포넌트에 수정할 수 있는 기능을 할수 있는 함수를 만들어서,\n  // 다이어리아이템까지 전달해주어야 한다.\n  const onEdit = (targetId,newContent) => {\n    setData(\n      // 원본 데이터 배열에서 , 모든 요소를 순회하며 새로운 배열을 만들어서 셋데이터로\n      // 수정 대상이라면 컨텐츠를 뉴ㅋㄴ텐츠로 교체, 아니라면 현재 원본 값을 지킴.\n      data.map((it)=>it.id === targetId ? {...it, content:newContent} : it)\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <Lifecycle />\n      <DiaryEditor onCreate={onCreate}/>\n      <DiaryList onEdit={onEdit} onRemove={onRemove} diaryList={data}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACxC,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,SAAS,MAAM,aAAa;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAGA,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMO,MAAM,GAAGR,MAAM,CAAC,CAAC,CAAC;EAExB,MAAMS,OAAO,GAAG,YAAW;IACzB,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,+CAA+C,CAAC;EAC1E,CAAC;EAED,MAAMC,QAAQ,GAAG,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,KAAK;IAC7C,MAAMC,YAAY,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IACzC,MAAMC,OAAO,GAAG;MACdN,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,YAAY;MACZI,EAAE,EAAEZ,MAAM,CAACa;IACb,CAAC;IACDb,MAAM,CAACa,OAAO,IAAI,CAAC;IACnBd,OAAO,CAAC,CAACY,OAAO,EAAE,GAAGb,IAAI,CAAC,CAAC;EAE7B,CAAC;EAED,MAAMgB,QAAQ,GAAIC,QAAQ,IAAK;IAC7BC,OAAO,CAACC,GAAG,CAAE,GAAEF,QAAS,YAAW,CAAC;IACpC,MAAMG,YAAY,GAAGpB,IAAI,CAACqB,MAAM,CAAEC,EAAE,IAAKA,EAAE,CAACR,EAAE,KAAKG,QAAQ,CAAC;IAC5DhB,OAAO,CAACmB,YAAY,CAAC;EACvB,CAAC;;EAED;EACA;EACA;EACA;EACA,MAAMG,MAAM,GAAG,CAACN,QAAQ,EAACO,UAAU,KAAK;IACtCvB,OAAO;IACL;IACA;IACAD,IAAI,CAACyB,GAAG,CAAEH,EAAE,IAAGA,EAAE,CAACR,EAAE,KAAKG,QAAQ,GAAG;MAAC,GAAGK,EAAE;MAAEd,OAAO,EAACgB;IAAU,CAAC,GAAGF,EAAE,CAAC,CACtE;EACH,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB,QAAC,SAAS;MAAA;MAAA;MAAA;IAAA,QAAG,eACb,QAAC,WAAW;MAAC,QAAQ,EAAEhB;IAAS;MAAA;MAAA;MAAA;IAAA,QAAE,eAClC,QAAC,SAAS;MAAC,MAAM,EAAEiB,MAAO;MAAC,QAAQ,EAAEP,QAAS;MAAC,SAAS,EAAEhB;IAAK;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAC7D;AAEV;AAAC,GAhDQD,GAAG;AAAA,KAAHA,GAAG;AAkDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}