{"ast":null,"code":"var _jsxFileName = \"/Users/hongdonghwa/Desktop/donghwa/simplediary/src/OptimizeTest.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CounterA = /*#__PURE__*/_s( /*#__PURE__*/React.memo(_c = _s(_ref => {\n  _s();\n  let {\n    count\n  } = _ref;\n  useEffect(() => {\n    console.log(`CounterA Update - count: ${count}`);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: count\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 12\n  }, this);\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = CounterA;\nconst CounterB = /*#__PURE__*/_s2( /*#__PURE__*/React.memo(_c3 = _s2(_ref2 => {\n  _s2();\n  let {\n    obj\n  } = _ref2;\n  useEffect(() => {\n    console.log(`CounterB Update - count: ${obj.count}`);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: obj.count\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 12\n  }, this);\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c4 = CounterB;\nconst areEqual = (prevProps, nextProps) => {\n  if (prevProps.obj.count === nextProps.obj.count) {\n    return true;\n  }\n  return false;\n\n  // return true // 이전 프롭스 현재 프롭스가 같다. -> 리렌더링을 일으키지 않게 됨\n  // return false // 이전과 현재가 다르다 -> 리렌더링을 일으킨다\n};\n\nconst MemoizedCounterB = /*#__PURE__*/React.memo(CounterB, areEqual);\n_c5 = MemoizedCounterB;\nconst OptimizeTest = () => {\n  _s3();\n  const [count, setCount] = useState(1);\n  const [obj, setObj] = useState({\n    count: 1\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 50\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Counter A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CounterA, {\n        count: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCount(count),\n        children: \"A button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Counter B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CounterB, {\n        obj: obj\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setObj({\n          count: obj.count\n        }),\n        children: \"B button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 13\n  }, this);\n};\n\n// const Textview = React.memo(({text}) => {\n//     useEffect(()=>{\n//         console.log(`Updata :: Text : ${text}`)\n//     })\n//     return <div>{text}</div>\n// })\n\n// const CountView = React.memo(({count}) => {\n//     useEffect(()=>{\n//         console.log(`Updata :: Count : ${count}`)\n//     })\n//     return <div>{count}</div>\n// })\n\n// const OptimizeTest = () => {\n\n//     const [count, setCount] = useState(1)\n//     const [text, setText] = useState(\"\")\n\n//     return <div style={{padding: 50}}>\n//         <div>\n//             <h2>count</h2>\n//             <CountView count={count}/>\n//             <button onClick={()=>setCount(count+1)}>+</button>\n//         </div>\n//         <div>\n//             <h2>text</h2>\n//             <Textview text={text}/>\n//             <input value={text} onChange={(e)=>setText(e.target.value)} />\n//         </div>\n//     </div>\n// }\n_s3(OptimizeTest, \"CzYp+NRHhE2fMdKpbL2KZcAXU0U=\");\n_c6 = OptimizeTest;\nexport default OptimizeTest;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"CounterA$React.memo\");\n$RefreshReg$(_c2, \"CounterA\");\n$RefreshReg$(_c3, \"CounterB$React.memo\");\n$RefreshReg$(_c4, \"CounterB\");\n$RefreshReg$(_c5, \"MemoizedCounterB\");\n$RefreshReg$(_c6, \"OptimizeTest\");","map":{"version":3,"names":["React","useEffect","useState","CounterA","memo","count","console","log","CounterB","obj","areEqual","prevProps","nextProps","MemoizedCounterB","OptimizeTest","setCount","setObj","padding"],"sources":["/Users/hongdonghwa/Desktop/donghwa/simplediary/src/OptimizeTest.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\n\nconst CounterA = React.memo (({count}) => {\n\n        useEffect(()=>{\n            console.log(`CounterA Update - count: ${count}`)\n        })\n\n    return <div>{count}</div>\n})\n\nconst CounterB = React.memo(({obj}) => {\n\n     useEffect(()=>{\n            console.log(`CounterB Update - count: ${obj.count}`)\n        })\n    \n    return <div>{obj.count}</div>\n})\n\nconst areEqual = (prevProps, nextProps)=> {\n\n    if(prevProps.obj.count === nextProps.obj.count){\n        return true\n    }\n    return false\n\n    // return true // 이전 프롭스 현재 프롭스가 같다. -> 리렌더링을 일으키지 않게 됨\n    // return false // 이전과 현재가 다르다 -> 리렌더링을 일으킨다\n}\n\nconst MemoizedCounterB = React.memo(CounterB, areEqual)\n\nconst OptimizeTest = () => {\n\n    const [count, setCount] = useState(1)\n    const [obj, setObj] = useState({\n        count: 1\n    })\n\n    return (<div style={{padding: 50}}>\n        <div>\n            <h2>Counter A</h2>\n            <CounterA count={count} />\n            <button onClick={() => setCount(count)}>A button</button>\n        </div>\n        <div>\n            <h2>Counter B</h2>\n            <CounterB obj={obj} />\n            <button onClick={() => setObj({\n                count: obj.count\n            })}>B button</button>\n        </div>\n    </div>\n    )\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const Textview = React.memo(({text}) => {\n//     useEffect(()=>{\n//         console.log(`Updata :: Text : ${text}`)\n//     })\n//     return <div>{text}</div>\n// })\n\n// const CountView = React.memo(({count}) => {\n//     useEffect(()=>{\n//         console.log(`Updata :: Count : ${count}`)\n//     })\n//     return <div>{count}</div>\n// })\n\n\n// const OptimizeTest = () => {\n\n    \n//     const [count, setCount] = useState(1)\n//     const [text, setText] = useState(\"\")\n    \n//     return <div style={{padding: 50}}>\n//         <div>\n//             <h2>count</h2>\n//             <CountView count={count}/>\n//             <button onClick={()=>setCount(count+1)}>+</button>\n//         </div>\n//         <div>\n//             <h2>text</h2>\n//             <Textview text={text}/>\n//             <input value={text} onChange={(e)=>setText(e.target.value)} />\n//         </div>\n//     </div>\n// }\n\nexport default OptimizeTest"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA;AAElD,MAAMC,QAAQ,iCAAGH,KAAK,CAACI,IAAI,SAAE,QAAa;EAAA;EAAA,IAAZ;IAACC;EAAK,CAAC;EAE7BJ,SAAS,CAAC,MAAI;IACVK,OAAO,CAACC,GAAG,CAAE,4BAA2BF,KAAM,EAAC,CAAC;EACpD,CAAC,CAAC;EAEN,oBAAO;IAAA,UAAMA;EAAK;IAAA;IAAA;IAAA;EAAA,QAAO;AAC7B,CAAC,kCAAC;AAAA,MAPIF,QAAQ;AASd,MAAMK,QAAQ,kCAAGR,KAAK,CAACI,IAAI,WAAC,SAAW;EAAA;EAAA,IAAV;IAACK;EAAG,CAAC;EAE7BR,SAAS,CAAC,MAAI;IACPK,OAAO,CAACC,GAAG,CAAE,4BAA2BE,GAAG,CAACJ,KAAM,EAAC,CAAC;EACxD,CAAC,CAAC;EAEN,oBAAO;IAAA,UAAMI,GAAG,CAACJ;EAAK;IAAA;IAAA;IAAA;EAAA,QAAO;AACjC,CAAC,kCAAC;AAAA,MAPIG,QAAQ;AASd,MAAME,QAAQ,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAI;EAEtC,IAAGD,SAAS,CAACF,GAAG,CAACJ,KAAK,KAAKO,SAAS,CAACH,GAAG,CAACJ,KAAK,EAAC;IAC3C,OAAO,IAAI;EACf;EACA,OAAO,KAAK;;EAEZ;EACA;AACJ,CAAC;;AAED,MAAMQ,gBAAgB,gBAAGb,KAAK,CAACI,IAAI,CAACI,QAAQ,EAAEE,QAAQ,CAAC;AAAA,MAAjDG,gBAAgB;AAEtB,MAAMC,YAAY,GAAG,MAAM;EAAA;EAEvB,MAAM,CAACT,KAAK,EAAEU,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACO,GAAG,EAAEO,MAAM,CAAC,GAAGd,QAAQ,CAAC;IAC3BG,KAAK,EAAE;EACX,CAAC,CAAC;EAEF,oBAAQ;IAAK,KAAK,EAAE;MAACY,OAAO,EAAE;IAAE,CAAE;IAAA,wBAC9B;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB,eAClB,QAAC,QAAQ;QAAC,KAAK,EAAEZ;MAAM;QAAA;QAAA;QAAA;MAAA,QAAG,eAC1B;QAAQ,OAAO,EAAE,MAAMU,QAAQ,CAACV,KAAK,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB;IAAA;MAAA;MAAA;MAAA;IAAA,QACvD,eACN;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB,eAClB,QAAC,QAAQ;QAAC,GAAG,EAAEI;MAAI;QAAA;QAAA;QAAA;MAAA,QAAG,eACtB;QAAQ,OAAO,EAAE,MAAMO,MAAM,CAAC;UAC1BX,KAAK,EAAEI,GAAG,CAACJ;QACf,CAAC,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB;IAAA;MAAA;MAAA;MAAA;IAAA,QACnB;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAGV,CAAC;;AAoBD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IA5EMS,YAAY;AAAA,MAAZA,YAAY;AA8ElB,eAAeA,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}